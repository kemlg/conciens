cmdhistory=[";; Loading file src/Armory.clj" "(+ 1 2)" ";; Loading file src/Armory.clj" "(+ 2 3)" ";; Loading file src/Armory.clj" "(+ 1 2)" ";; Loading file src/Armory.clj" "(+ 1 2)" ";; Loading file src/Armory.clj" ";; Loading file src/GetCSV.clj" "(+ 1 2)" ";; Loading file src/GetCSV.clj" "(+  1 2)" ";; Loading file src/GetCSV.clj" "(+ 1 2)" ";; Loading file src/GetCSV.clj" "(+ 2 3)" ";; Loading file src/GetCSV.clj" "(+ 1 2)" ";; Loading file src/GetCSV.clj" "(+ 1 1)" ";; Loading file src/GetCSV.clj" "(+ 9 9)" ";; Loading file src/GetCSV.clj" "(contains? (1 2 3) 1)" "(contains? (list 1 2 3) 1)" "(contains? (list 1 2 3) 2)" ";; Loading file src/GetCSV.clj" ";; Loading file src/Armory.clj" ";; Loading file src/WowHead.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Utilities.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Utilities.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/WowHead.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/ParseExcelDocs.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/ParseExcelDocs.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/ParseExcelDocs.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/ParseExcelDocs.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/ParseExcelDocs.clj" ";; Loading file src/GDocs.clj" "(use 'clojure.stacktrace)" "(print-stack-trace *e 5)" "(print-stack-trace *e)" ";; Loading file src/GDocs.clj" "(print-stack-trace *e)" ";; Loading file src/GDocs.clj" "(+ 1 2)" ";; Loading file src/GDocs.clj" "(print-stack-trace *e)" ";; Loading file src/GDocs.clj" "(print-stack-trace *e)" ";; Loading file src/GDocs.clj" "(+ 1 2 3)" ";; Loading file src/GDocs.clj" "(+ 1 2)" ";; Loading file src/GDocs.clj" "(+ 1 2)" ";; Loading file src/GDocs.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'GDocs)))" ";; Loading file src/GDocs.clj" "*" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" "(+ 1 2)" ";; Loading file src/GDocs.clj" "(+ 1 3)" "(threads)" "(agents)" "(+ 1 2)" ";; Loading file src/GDocs.clj" "(.. Runtime getRuntime availableProcessors)" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Armory.clj" ";; Loading file src/GDocs.clj" ";; Loading file src/Continents.clj" ";; Loading file src/Armory.clj" ";; Loading file src/Continents.clj" ";; Loading file src/Realms.clj" ";; Loading file src/Achievements.clj" ";; Loading file src/Continents.clj" ";; Loading file src/Realms.clj" ";; Loading file src/Armory.clj" ";; Loading file src/main/clojure/Armory.clj" ";; Loading file src/main/clojure/Realms.clj" ";; Loading file src/main/clojure/GDocs.clj" ";; Loading file src/main/clojure/Armory.clj" "(+ 1 2)" "(use '(incanter core stats charts datasets))" "(+ 1 2)" "1" "(use '(incanter core stats charts datasets))" "(def iris (to-matrix (get-dataset \:iris)))" "(def pca (principal-components (sel iris \:cols (range 4))))" "(def pc1 (sel (\:rotation pca) \:cols 0))" "(def pc2 (sel (\:rotation pca) \:cols 1))" "(def x1 (mmult (sel iris \:cols (range 4)) pc1))" "(def x2 (mmult (sel iris \:cols (range 4)) pc2))" "(doto (scatter-plot (sel x1 \:rows (range 50)) (sel x2 \:rows (range 50))\\n\:x-label \\"PC1\\" \:y-label \\"PC2\\" \:title \\"Iris PCA\\")" "(doto (scatter-plot (sel x1 \:rows (range 50)) (sel x2 \:rows (range 50))\\n\:x-label \\"PC1\\" \:y-label \\"PC2\\" \:title \\"Iris PCA\\")\\n(add-points (sel x1 \:rows (range 50 100)) (sel x2 \:rows (range 50 100)))\\n(add-points (sel x1 \:rows (range 100 150)) (sel x2 \:rows (range 100 150)))\\nview)" "\\n(use 'incanter.io)" "(def data (read-dataset \\"datafile.csv\\" \:header true))" "(version)" "(clojure-version)" ";; Loading file src/main/clojure/Utilities.clj" ";; Loading file src/main/clojure/Armory.clj" ";; Loading file src/main/clojure/GDocs.clj" ";; Loading file src/main/clojure/Continents.clj" ";; Loading file src/main/clojure/Realms.clj" ";; Loading file src/main/clojure/WowHead.clj" ";; Loading file src/main/clojure/Stats.clj" "(+ 1 2)" ";; Loading file src/main/clojure/Stats.clj" "(data)" "(count data)" "(count Stats/data)" "(clojure.pprint/pprint (first Stats/data))" "(count Stats/pca)" "(count Stats/iris)" "(class Stats/iris)" "(class Stats/iris(" "(class Stats/iris)" ";; Loading file src/main/clojure/GDocs.clj" "(process-character (get-player \\"http\://eu.battle.net/wow/en/character/illidan/Mionelol/\\"))" ";; Loading file src/main/clojure/GDocs.clj" "(process-character (get-player \\"http\://eu.battle.net/wow/en/character/illidan/Mionelol/\\"))" "(update-gb-docs)" "(update-gb-gdocs)" "(update-db-gdocs)" ";; Loading file src/main/clojure/GetCSV.clj" "(get-csv)" "(GetCSV/get-csv)" ";; Loading file src/main/clojure/GetCSV.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'GetCSV)))" ";; Loading file src/main/clojure/GetCSV.clj" "(GetCSV/get-csv)" ";; Loading file src/main/clojure/GetCSV.clj" ";; Loading file src/main/clojure/Stats.clj" "(Stats/iris)" "(count Stats/data)" "(count (second Stats/data))" "(count (first Stats/data))" "(count (first (second Stats/data)))" "(class Stats/data)" "(def pca (principal-components (sel iris \:cols (range 4))))" ";; Loading file src/main/clojure/Stats.clj" ";; Loading file src/main/clojure/GetCSV.clj" ";; Loading file src/main/clojure/GDocs.clj" "(update-db-gdocs)" "(GDocs/update-db-gdocs)" "(+ 1 2)" ";; Loading file src/main/clojure/Utilities.clj" ";; Loading file src/main/clojure/GDocs.clj" "(GDocs/update-db-gdocs)" ";; Loading file src/main/clojure/Achievements.clj" "(defn insert-achievement [row]\\n  (sql/with-connection\\n    db\\n    (sql/insert-values\\n    \:achievements\\n    [\:name]\\n    [(\:achievement row)])))" ";; Loading file src/main/clojure/Achievements.clj" "(Achievements/update-db-achievements)" ";; Loading file src/main/clojure/Achievements.clj" "(Achievements/update-db-achievements)" ";; Loading file src/main/clojure/Realms.clj" "(Realms/update-db-realms)" ";; Loading file src/main/clojure/Realms.clj" "(Realms/update-db-realms)" ";; Loading file src/main/clojure/Continents.clj" "(Continents/update-db-continents)" ";; Loading file src/main/clojure/Realms.clj" "(Realms/update-db-realms)" ";; Loading file src/main/clojure/Utilities.clj" ";; Loading file src/main/clojure/GetCSV.clj" ";; Loading file src/main/clojure/Stats.clj" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(doc assoc)" "(assoc {\:a 1 \:b 2} \:a 2)" "(doc map-indexed)" "(doc interleave)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "*e" "(class e)" "(class *e)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(class *e)" "(. *e printStackTrace)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(. *e printStackTrace)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(. *e printStackTrace)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(defn asort [amap order]\\n (conj {} (select-keys amap order)))" "(asort (apply sorted-map (interleave (range 0 50) (range 0 50))) (range 32 0 -1))" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(doc take)" "(doc process-record)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(doc loop)" "(doc recur)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(. *e printStackTrace)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(. *e printStackTrace)" "(doc insert\!)" "(doc cm/insert\!)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(.getCollection ^DB (\:db *mongo-config*)\\n                   ^String (named ~collection))" "(.getCollection conn (\:db *mongo-config*)\\n                   ^String (named ~collection))" "(.getCollection cm/^DB (\:db cm/*mongo-config*)\\n                   ^String (named ~collection))" "(named ~\:players)" "(name \:players)" "(name ~\:players)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(. *e printStackTrace)" "conn" "(class conn)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(cm/fetch-one \:players)" "(cm/fetch-one \:foo)" "(cm/with-mongo (cm/fetch-one \:foo))" "(cm/with-mongo conn (cm/fetch-one \:foo))" "(cm/with-mongo conn (cm/fetch-one \:players))" "(cm/with-mongo conn (cm/insert\! \:foo {\:a 2}))" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(doc separate)" "(doc clojure.contrib.seq/separate)" "(doc complement)" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(key {\:a 2})" "(first {\:a 2 \:b 3})" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(filter \#(not (\= (. (first %) charAt 1) \\\\))) {\:a 2 \:b 3})" "(filter \#(not (\= (. (first %) charAt 1) \\\\))) {\\"flajdsf\\" 2 \\"dkfjaskdjf\\" 3})" "(filter \#(not (\= (. (first %) charAt 1) \\\\))) {\\"flajdsf\\" 2 \\"d) 2kdjfkjdsfksdj\\" 3})" ";; Loading file src/main/clojure/BlizzardAPI.clj" "(doc assoc)" ";; Loading file src/main/clojure/BlizzardAPI.clj" ";; Loading file src/main/clojure/Mongo2CSV.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Mongo2CSV)))" ";; Loading file src/main/clojure/Mongo2CSV.clj" ";; Loading file src/main/clojure/MahoutTest.clj" "(doc)" "(doc doubles)" ";; Loading file src/main/clojure/MahoutTest.clj" "(doubles 1)\\n" "(doubles [1])" "(doc seq)" ";; Loading file src/main/clojure/MahoutTest.clj" "clusters" ";; Loading file src/main/clojure/MahoutTest.clj" ";; Loading file contrib/mongodb.clj" ";; Loading file src/main/clojure/MahoutTest.clj" ";; Loading file src/main/clojure/Mongo2CSV.clj" ";; Loading file src/main/clojure/MahoutTest.clj" "(Mongo2CSV/dump-all)" ";; Loading file src/main/clojure/MahoutTest.clj" "(rand 1)" "(round (rand 1))" ";; Loading file src/main/clojure/MahoutTest.clj" "(rand-int 1)" "(take 100 (repeat (round (rand 1))))" "(take 100 (repeat (rand-int 1)))" "(take 100 (repeat (rand-int 2)))" "(take 100 (repeat (rand-int 10)))" "(take 100 (repeat '(rand-int 2)))" "(map eval (take 100 (repeat '(rand-int 2))))" ";; Loading file src/main/clojure/MahoutTest.clj" "(count result)" "(count mahout-sample.recommend/result)" "(println (first mahout-sample.recommend/result))" ";; Loading file src/main/clojure/MahoutTest.clj" ";; Loading file src/main/clojure/ClusterArffDetector.clj" ";; Loading file src/main/clojure/MahoutTest.clj" " (partition 2 [1 2 3 4 5 6])" "(partition 2 '(1 2 3 4 5 6))" ";; Loading file src/main/clojure/MahoutTest.clj" "(partition 2\\n  (interleave [1 2 3] [3 2 1]))" "(mahout-sample.recommend/mahouts)" "mahout-sample.recommend/mahouts" ";; Loading file src/main/clojure/MahoutTest.clj" "*print-stack-trace*" "(print-stack-trace *e)" "(clojure.stacktrace/print-stack-trace *e)" "(clojure.stacktrace/print-stack-trace ((clojure.stacktrace/e))" "(clojure.stacktrace/print-stack-trace ((clojure.stacktrace/e)))" "(clojure.stacktrace/print-stack-trace (clojure.stacktrace/e))" ";; Loading file src/main/clojure/MahoutTest.clj" "(clojure.stacktrace/print-stack-trace (clojure.stacktrace/e))" ";; Loading file src/main/clojure/MahoutTest.clj" "(count (Mongo2CSV/get-all-data))" ";; Loading file src/main/clojure/MahoutTest.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'mahout-sample.recommend)))" ";; Loading file src/main/clojure/MahoutTest.clj" "mahout-sample.recommend/cluster-1" ";; Loading file src/main/clojure/ClusterAnalysis.clj" "(+ 1 2)" "(+ 1 1)" "(+ 1 2)" "a" "*e" "(. *e printStackTrace)" "(. *e getMessage)" "(. *e (. *e printStackTrace))" "(+ 1 2)" "(merge-matches mapa-clusters-lists)" "(+ 1 1)" "(+ 1 2)" "(merge-matches mapa-clusters-lists)" "(+ 1 1)" "*e" "(. *e printStackTrace)" "(+ 1 2)" "(+ 1 1)" "a" "(. *e printStackTrace)" "(. *e getMessage)" "(+ 1 1)" "(cluster-and-store)" "(def a {2047 (0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 0 0 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0), 5119 (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0)})" "(def a (hash-map 2047 (0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 0 0 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0), 5119 (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0)))" "(def a (apply \\n         hash-map 2047 (0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 0 0 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0), 5119 (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0)))" "(def a 1)" "(def a (apply \\n            hash-map 2047 (0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 0 0 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0))\\n  \\n  )" "(. *e printStackTrace)" "(cluster-and-store)" "(doc transpose)" "(range 10)" "(cluster-and-store)" "(process-csv)" "(+ 1 2)" "a" "(doc partition-by)" "(partition-by identity '(1 1))" "(count (partition-by identity '(1 1)))" "a" "(doc sort)" "(sort-by sort)" "(doc sort-by)" "(. *e printStackTrace)" "*e" "(. *e printStackTrace)" "(class e)" "(class *e)" "(. *e getCause)" "(print-stack-trace *e)" "(use 'clojure.stacktrace)" "(print-stack-trace *e)" "(cluster-and-store)" "a" "(+ 1 2)" "(filter \#(> (key a) 1) '{1 2, 3 4})" "(filter \#(> (key %) 1) '{1 2, 3 4})" "(print-stack-trace *e)" "(println mapa-clusters-lists)" "(cluster-and-store)" "(doc interleave)" "(doc repeat)" "(doc sort-by)" "(print-stack-trace *e)" "(range 4)" "(interleave (range 4) (range 4))" "(into {} (interleave (range 4) (range 4)))" "(apply hash-map (interleave (range 4) (range 4)))" "(print-stack-trace *e)" "a" "(into {} ({1 2} {3 4}))" "(into {} (flatten ({1 2} {3 4})))" "(flatten ({1 2} {3 4}))" "(into {} '({1 2} {3 4}))" ";; Switching to Mongo2CSV namespace" "(dump-all)" ";; Switching to Mongo2CSV namespace" "(dump-all)" "(.printStackTrace *e)" ";; Switching to Mongo2CSV namespace" "(dump-all)" ";; Switching to Clusterer namespace" "(.printStackTrace *e)" "(ds)" "ds" "(dump-all)" "(Mongo2CSV/dump-all)"]
eclipse.preferences.version=1
